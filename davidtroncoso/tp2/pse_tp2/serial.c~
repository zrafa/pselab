#include<avr/io.h>


/* Completar la estructura de datos para que se superponga a los registros
   del periferico de hardware del USART del atmega328, segun sugerido
   en el apunte */

typedef struct
{
uint8_t status_control_a;    /* ucsr0a USART Control and Status A */	
uint8_t status_control_b;    /* ucsr0b USART Control and Status B 		aca habilitar recepcion y transmision*/
uint8_t status_control_c;    /* ucsr0c USART Control and Status C */
	uint8_t _reserved; /* espacio sin utilizar */
   	uint8_t baud_rate_l;    /* ubrr0l baud rate low */;
	
    /* demas registros */
	uint8_t baud_rate_h;    /* ubrr0h baud rate high */
	uint8_t data_es;    /* udr0 i/o data */

} volatile uart_t;

/* puntero a la estructura de los registros del periferico */
uart_t *puerto_serial = (uart_t *) (0xc0);		//del manual

#define F_CPU 16000000

#define USART_BAUDRATE 9600
#define BAUD_PRESCALE (((F_CPU/(USART_BAUDRATE*16UL)))-1)

#define RECIVE_TRANSMIT_ENABLE 0x18
#define PARIDADPAR_2BITSTOP 0x24

void serial_init() {

	/* Escribir una rutina de inicializacion */
	/* El manual del atmega328p tiene un ejemplo. Adecuarla a C y
           la estructura de datos */
	//puerto_serial = puerto_serial | 0x02

	/* Configurar los registros High y Low con BAUD_PRESCALE */
	/* Configurar un frame de 8bits, con un bit de paridad y bit de stop */
	//0xc0 conf paridad bit 2
	//0xc2 conf stop bit 3 ya en cero
	/* Activar la recepcion y transmicion */
	puerto_serial->status_control_b = puerto_serial->status_control_b | RECIVE_TRANSMIT_ENABLE;

	puerto_serial->status_control_c = puerto_serial->status_control_c | PARIDADPAR_2BITSTOP;
	
	puerto_serial->baud_rate_h = BAUD_PRESCALE>>8;
	puerto_serial->baud_rate_l = BAUD_PRESCALE;

}
/* enviar un byte a traves del del dispositivo inicializado */
void serial_put_char (char outputChar)
{
    /* Wait until the transmitter is ready for the next character. */
	
    /* completar con E/S programada polling --- consulta por si el 'bit?' que habilita posibilidad de escritura*/
    /* Se debe esperar verificando el bit UDREn del registro UCSRnA,
       hasta que el buffer estÃ© listo para recibir un dato a transmitir */
	while(!((puerto_serial->status_control_a & 0x20) == 0x20));
	
	puerto_serial->data_es=outputChar;
    // while ( /* completar con E/S programada */ )
    //     ;

    /* Send the character via the serial port. */
    /* (escribir el dato al registro de datos de E/S */

}


char serial_get_char(void)
{
    /* Wait for the next character to arrive. */
    /* Completar con E/S programada similar a serial_put_char pero 
       utilizando el bit correcto */
    
	while((puerto_serial->status_control_a & 0x80) != 0x80);

    // while ( /* completar con E/S programada */ )
    //     ;
	return puerto_serial->data_es;
    // return /* DEBE devolver el valor que se encuentra en el registro de datos de E/S */

}



